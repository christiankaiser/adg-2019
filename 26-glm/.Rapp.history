t.test(scores.A, scores.B)
help(t.test)
t.test(scores.A, scores.B, conf.level=0.05)
t.test(scores.A, scores.B, conf.level=0.95)
t.test(scores.A, scores.B, conf.level=0.98)
t.test(scores.A, scores.B, conf.level=0.99)
t.test(scores.A, scores.B, conf.level=0.9999)
t.test(scores.A, scores.B, conf.level=0.1)
t.test(scores.A, scores.B)
summary(scores.A)
summary(scores.B)
sd(scores.A)
sd(scores.B)
d = read.table(file="~/Documents/teaching/2014.2-carto-sig/controle-1/controle-1-test.txt", header=FALSE, sep="\t")
t.test(score ~ gr2, data=d)
t.test(scores ~ gr2, data=d)
d$score
summary(d)
d = read.table(file="~/Documents/teaching/2014.2-carto-sig/controle-1/controle-1-test.txt", header=TRUE, sep="\t")
t.test(score ~ gr2, data=d)
t.test(score ~ gr1, data=d)
t.test(score ~ gr2, data=d)
d = read.table(file="~/Documents/Transfert/marchabilite/secteurs-alldata.tsv", sep="\t", header=TRUE)
d = read.table(file="~/Documents/Transfert/marchabilite/secteurs-alldata.tsv", sep="\t", header=TRUE, quote="")
summary(d)
corr(d)
cor(d)
d = read.table(file="~/Documents/Transfert/marchabilite/secteurs-alldata.tsv", sep="\t", header=TRUE, quote="")
cor(d)
d0 = d[,c("mixite_std", "mixite_smi", "mixite_etd", "connectiv", "sd_z", "pop2013_ha", "isect3plus_ha", "prop_steep_slopes", "dens_restaurants", "mixite_adapte", "prop_zones_verdures")]
cor(d0)
d = read.table(file="~/Documents/Transfert/marchabilite/secteurs-alldata.tsv", sep="\t", header=TRUE, quote="")#
# Extract the relevant variables from the data frame#
d0 = d[,c("mixite_std", "mixite_smi", "mixite_etd", "connectiv", "sd_z", "pop2013_ha", "isect3plus_ha", "prop_steep_slopes", "dens_restaurants", "mixite_adapte", "prop_zones_verdures")]
cor(d0)
d1 = d[,c("mixite_adapte", "connectiv", "isect3plus_ha", "sd_z", "pop2013_ha", "prop_steep_slopes", "dens_restaurants",  "prop_zones_verdures")]
cor(d1)
pca?
?
()
help(pca)
?pca
??pca
d2
d2 = d[,c("mixite_adapte", "isect3plus_ha", "pop2013_ha")]
princomp(d2)
princomp(x=d2)
pca = princomp(d2, cor=TRUE)
pca
pca$loadings
pca$scores
cor(d2)
library(spgwr)
example(gwr)
out
out2 = gwr(formula = PctBach ~ X1 + X2 + X3, data = gSRDF, bandwidth = bw, #
    hatmatrix = TRUE)
out2 = gwr(formula = PctBach ~ X1 + X2 + X3, data = gSRDF, bandwidth = bw, #
    hatmatrix = TRUE, type="deviance")
out2 = ggwr(formula = PctBach ~ X1 + X2 + X3, data = gSRDF, bandwidth = bw, #
    hatmatrix = TRUE)
out2 = ggwr(formula = PctBach ~ X1 + X2 + X3, data = gSRDF, bandwidth = bw)
out2
out2 = ggwr(formula = PctBach ~ X1 + X2 + X3, data = gSRDF, bandwidth = bw, type="deviance")
out2
summary(out2)
out2 = ggwr(formula = PctBach ~ X1 + X2 + X3, data = gSRDF, family="poisson", bandwidth = bw, type="deviance")
warnings()
out2
out2$SDF
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
install.packages("rggobi")
d = read.table("~/Documents/projects/PCW/data/hectares_parts_modales.csv", header=TRUE, sep=",")
summary(d)
help(lm)
r0 = lm(clstc_inv ~  p_mb + p_tc + p_tim)
r0 = lm(d$clstc_inv ~  d$p_mb + d$p_tc + d$p_tim)
r0
summary(r0)
r100 = lm(d$clstc_inv_kde100 ~  d$p_mb_kde100 + d$p_tc_kde100 + d$p_tim_kde100)
summary(r100)
r250 = lm(d$clstc_inv_kde250 ~  d$p_mb_kde250 + d$p_tc_kde250 + d$p_tim_kde250)
summary(r250)
r500 = lm(d$clstc_inv_kde500 ~  d$p_mb_kde500 + d$p_tc_kde500 + d$p_tim_kde500)
summary(r500)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))#
devtools::install_github('IRkernel/IRkernel')
help(symbols)
require(stats) # for rnorm#
require(grDevices)
sunflowerplot(iris[, 3:4])
sunflowerplot(Petal.Width ~ Petal.Length, data = iris,#
              cex = .2, cex.fact = 1, size = .035, seg.lwd = .8)
sunflowerplot(rnorm(100), rnorm(100), number = rpois(n = 100, lambda = 2),#
              main = "Sunflower plot (marked point process)",#
              rotate = TRUE, col = "blue4")
help(hist)
shapiro.test
help(shapiro.test)
sort
## This gist shows how to create Flow Maps in R using ggplot2. #
## source: This is based on different bits of code from other with amazing R skills: #
#
@ceng_l          : http://web.stanford.edu/~cengel/cgi-bin/anthrospace/great-circles-on-a-recentered-worldmap-in-ggplot#
@3wen            : http://egallic.fr/maps-with-r/#
@spatialanalysis : http://spatialanalysis.co.uk/2012/06/mapping-worlds-biggest-airlines/#
@freakonometrics : http://freakonometrics.hypotheses.org/48184#
# Libraries#
  library(maps)#
  library(geosphere)#
  library(dplyr)#
  library(ggplot2)#
  library(rworldmap)#
  library(plyr)#
  library(data.table)#
  library(ggthemes)#
# Get World map#
  worldMap <- getMap()#
  mapworld_df <- fortify( worldMap )#
# Read data on airports and flights#
  airports <- read.csv("http://www.stanford.edu/~cengel/cgi-bin/anthrospace/wp-content/uploads/2012/03/airports.csv", as.is=TRUE, header=TRUE)#
  flights <- read.csv("http://www.stanford.edu/~cengel/cgi-bin/anthrospace/wp-content/uploads/2012/03/PEK-openflights-export-2012-03-19.csv", as.is=TRUE, header=TRUE)#
#
# get airport locations#
  airport_locations <- airports[, c("IATA","longitude", "latitude")]#
#
# aggregate number of flights (frequency of flights per pair)#
  flights.ag <- ddply(flights, c("From","To"), function(x) count(x$To))#
# Link airport lat  long to origin and destination#
  OD <- left_join(flights.ag, airport_locations, by=c("From"="IATA") )#
  OD <- left_join(OD, airport_locations, by=c("To"="IATA") )#
  OD$id <-as.character(c(1:nrow(OD))) #create and id for each pair#
##### Two Simple Maps ##### #
#
# 1. Using straight lines#
  ggplot() + #
    geom_polygon(data= mapworld_df, aes(long,lat, group=group), fill="gray30") +#
    geom_segment(data = OD, aes(x = longitude.x, y = latitude.x, xend = longitude.y, yend = latitude.y, color=freq),#
                 arrow = arrow(length = unit(0.01, "npc"))) +#
    scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +#
    coord_equal()#
# 2. Using Curved Lines#
  ggplot() + #
    geom_polygon(data= mapworld_df, aes(long,lat, group=group), fill="gray30") +#
    geom_curve(data = OD, aes(x = longitude.x, y = latitude.x, xend = longitude.y, yend = latitude.y, color=freq),#
               curvature = -0.2, arrow = arrow(length = unit(0.01, "npc"))) +#
    scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +#
    coord_equal()#
##### A more professional map ####  #
# Using shortest route between airports considering the spherical curvature of the planet#
#
# get location of Origin and destinations airports#
  setDT(OD) # set OD as a data.table for faster data manipulation#
  beijing.loc <- OD[ From== "PEK", .(longitude.x, latitude.x)][1] # Origin#
  dest.loc <- OD[ , .(longitude.y, latitude.y)] # Destinations#
#
# calculate routes between Beijing (origin) and other airports (destinations)#
  routes <- gcIntermediate(beijing.loc, dest.loc, 100, breakAtDateLine=FALSE, addStartEnd=TRUE, sp=TRUE)#
  class(routes) # SpatialLines object#
# Convert a SpatialLines object into SpatialLinesDataFrame, so we can fortify and use it in ggplot#
  # create empty data frate  #
  ids <- data.frame()#
  # fill data frame with IDs for each line#
  for (i in (1:length(routes))) {         #
    id <- data.frame(routes@lines[[i]]@ID)#
    ids <- rbind(ids, id)  }#
#
  colnames(ids)[1] <- "ID" # rename ID column#
#
# convert SpatialLines into SpatialLinesDataFrame using IDs as the data frame#
  routes <- SpatialLinesDataFrame(routes, data = ids, match.ID = T)#
#
# Fortify routes (convert to data frame)  +++  join attributes#
  routes_df <- fortify(routes, region= "ID") # convert into something ggplot can plot#
  gcircles <- left_join(routes_df, OD, by= ("id"))#
  head(gcircles)#
#
### Recenter #####
#
center <- 115 # positive values only - US centered view is 260#
#
# shift coordinates to recenter great circles#
  gcircles$long.recenter <-  ifelse(gcircles$long  < center - 180 , gcircles$long + 360, gcircles$long) #
#
# shift coordinates to recenter worldmap#
  worldmap <- map_data ("world")#
  worldmap$long.recenter <-  ifelse(worldmap$long  < center - 180 , worldmap$long + 360, worldmap$long)#
#
### Function to regroup split lines and polygons#
# takes dataframe, column with long and unique group variable, returns df with added column named group.regroup#
  RegroupElements <- function(df, longcol, idcol){  #
    g <- rep(1, length(df[,longcol]))#
    if (diff(range(df[,longcol])) > 300) {          # check if longitude within group differs more than 300 deg, ie if element was split#
      d <- df[,longcol] > mean(range(df[,longcol])) # we use the mean to help us separate the extreme values#
      g[!d] <- 1     # some marker for parts that stay in place (we cheat here a little, as we do not take into account concave polygons)#
      g[d] <- 2      # parts that are moved#
    }#
    g <-  paste(df[, idcol], g, sep=".") # attach to id to create unique group variable for the dataset#
    df$group.regroup <- g#
    df#
  }#
#
### Function to close regrouped polygons#
# takes dataframe, checks if 1st and last longitude value are the same, if not, inserts first as last and reassigns order variable#
  ClosePolygons <- function(df, longcol, ordercol){#
    if (df[1,longcol] != df[nrow(df),longcol]) {#
      tmp <- df[1,]#
      df <- rbind(df,tmp)#
    }#
    o <- c(1: nrow(df))  # rassign the order variable#
    df[,ordercol] <- o#
    df#
  }#
#
# now regroup#
  gcircles.rg <- ddply(gcircles, .(id), RegroupElements, "long.recenter", "id")#
  worldmap.rg <- ddply(worldmap, .(group), RegroupElements, "long.recenter", "group")#
#
# close polys#
  worldmap.cp <- ddply(worldmap.rg, .(group.regroup), ClosePolygons, "long.recenter", "order")  # use the new grouping var#
# Flat map#
  ggplot() +#
    geom_polygon(data=worldmap.cp, aes(long.recenter,lat,group=group.regroup), size = 0.2, fill="#f9f9f9", color = "grey65") +#
    geom_line(data= gcircles.rg, aes(long.recenter,lat,group=group.regroup, color=freq), size=0.4, alpha= 0.5) +#
    scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +#
    theme_map()+#
    ylim(-60, 90) +#
    coord_equal()#
# Spherical Map#
  ggplot() +#
    geom_polygon(data=worldmap.cp, aes(long.recenter,lat,group=group.regroup), size = 0.2, fill="#f9f9f9", color = "grey65") +#
    geom_line(data= gcircles.rg, aes(long.recenter,lat,group=group.regroup, color=freq), size=0.4, alpha= 0.5) +#
    scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +#
    # Spherical element#
    scale_y_continuous(breaks = (-2:2) * 30) +#
    scale_x_continuous(breaks = (-4:4) * 45) +#
    coord_map("ortho", orientation=c(61, 90, 0)) #
# Any ideas on how to color the oceans ? :)
library(maps)#
  library(geosphere)#
  library(dplyr)#
  library(ggplot2)#
  library(rworldmap)#
  library(plyr)#
  library(data.table)#
  library(ggthemes)
library(sp)
data(meuse)
coordinates(meuse) = ~x+y
summary(meuse)
vgm1 <- variogram(log(zinc)~1, meuse)#
plot(vgm1)
library(gstat)
vgm1 <- variogram(log(zinc)~1, meuse)
plot(vgm1)
model.1 <- fit.variogram(vgm1,vgm(1,"Sph",300,1))
plot(vgm1, model=model.1)
plot(vgm1, plot.numbers = TRUE, pch = "+")
vgm2 <- variogram(log(zinc)~1, meuse, alpha=c(0,45,90,135))
plot(vgm2)
model.2 <- vgm(.59,"Sph",926,.06,anis=c(0,0.3))
plot(vgm2, model=model.2)
plot(variogram(g, cutoff=1000, width=100, map=TRUE),#
main = "(cross) semivariance maps")
g = gstat(NULL, "zinc < 200", I(zinc<200)~1, meuse)#
g = gstat(g, "zinc < 400", I(zinc<400)~1, meuse)#
g = gstat(g, "zinc < 800", I(zinc<800)~1, meuse)
v = variogram(g, alpha=c(0,45,90,135))#
plot(v, group.id = FALSE, auto.key = TRUE) # id and id pairs panels#
plot(v, group.id = TRUE, auto.key = TRUE) # direction panels
plot(variogram(g, cutoff=1000, width=100, map=TRUE),#
main = "(cross) semivariance maps")
plot(variogram(g, cutoff=1000, width=100, map=TRUE), np=TRUE,#
main = "number of point pairs")
coordinates
meuse
help(curve)
install.package('kriging')
install.packages
install.packages('kriging', dependendies=TRUE)
install.packages("kriging", dependendies=TRUE)
install.packages(c("kriging"), dependendies=TRUE)
install.packages(c("sp"), dependendies=TRUE)
install.packages(c("sp"), dependencies=TRUE)
install.packages("kriging", dependencies=TRUE)
help(read.csv)
s = read.delim(file="datasets/samples/samples.tsv")
s = read.delim(file="~/Documents/teaching/visage/cours-09-kriging-example/datasets/samples/samples.tsv")
glimpse
summary(s)
library(maps)#
usa <- map("usa", "main", plot = FALSE)#
p <- list(data.frame(usa$x, usa$y))
install.packages('maps')
p
list(p)
[[1,2],[2,4]]
c(c(1,2), c(2,3))
list(c(c(1,2), c(2,3)))
x <- c(1:9, 8:1)#
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
x
y
p=polygon(x=c(0 160 160 0), y=c(0 0 112 112))
p=polygon(x=c(0,160,160,0), y=c(0,0,112,112))
p
dataframe
data.frame
help(data.frame)
L3 <- LETTERS[1:3]#
fac <- sample(L3, 10, replace = TRUE)
fac
(d <- data.frame(x = 1, y = 1:10, fac = fac))
d = list(data.frame(x=c(0,160,160,0), y=c(0,0,112,112)))
d
x <- 93+rep(1:8,each=10)/100#
y <- rep(seq(42.01,42.1,by=0.01), 8)#
z <- c(1,1,1,1,1,1,1,1,2,2,#
  1,1,2,2,1,1,1,2,2,2,#
  1,2,2,2,3,3,3,2,2,2,#
  2,2,2,1,1,1,3,2,2,1,#
  2,2,1,1,1,1,3,2,1,1,#
  2,1,1,1,1,1,3,3,1,1,#
  2,1,1,1,1,3,3,3,3,1,#
  1,1,1,1,1,1,1,3,3,3)#
xy.df <- data.frame(x,y)#
xy.coords <- SpatialPixels(SpatialPoints(xy.df))#
llCRS <- CRS("+proj=utm +zone=15 +ellps=WGS84")#
xy.sp <- SpatialPoints(xy.coords, proj4string = llCRS)#
xyz <- as.data.frame(cbind(x,y,z))#
xyz.spdf <- SpatialPixelsDataFrame(xy.coords, xyz)#
plot(xyz.spdf)
library(sp)
x <- 93+rep(1:8,each=10)/100#
y <- rep(seq(42.01,42.1,by=0.01), 8)#
z <- c(1,1,1,1,1,1,1,1,2,2,#
  1,1,2,2,1,1,1,2,2,2,#
  1,2,2,2,3,3,3,2,2,2,#
  2,2,2,1,1,1,3,2,2,1,#
  2,2,1,1,1,1,3,2,1,1,#
  2,1,1,1,1,1,3,3,1,1,#
  2,1,1,1,1,3,3,3,3,1,#
  1,1,1,1,1,1,1,3,3,3)#
xy.df <- data.frame(x,y)#
xy.coords <- SpatialPixels(SpatialPoints(xy.df))#
llCRS <- CRS("+proj=utm +zone=15 +ellps=WGS84")#
xy.sp <- SpatialPoints(xy.coords, proj4string = llCRS)#
xyz <- as.data.frame(cbind(x,y,z))#
xyz.spdf <- SpatialPixelsDataFrame(xy.coords, xyz)#
plot(xyz.spdf)
syz
xyz
g=matrix(nrow=112, ncol=160)
g
g[0,0]
g[1,1]
g[1,1]=1
g
g[1:10, 1:10]
1:10
set.seed(1331)#
pts = cbind(1:5, 1:5)#
dimnames(pts)[[1]] = letters[1:5]#
df = data.frame(a = 1:5)#
row.names(df) = letters[5:1]
pts
SpatialPointsDataFrame(pts, df)
SpatialPointsDataFrame(pts, df, match.ID = FALSE)
help(makegrid)
x = GridTopology(c(0,0), c(1,1), c(5,5))
x
y = SpatialGrid(grid=x)
y
writeGDAL
library(rgdal)
help(writeGDAL)
x=c(1,2,3)
x
save(x, file="test.RData")
load(file=test.RData)
load(file="test.RData")
x
load(file="~/Documents/teaching/visage/tmp/kriging-help/krig_result")
krig_result
library(rgdal)
krig_result$krige_output
krig_result$krige_output$var1.pred
writeGDAL(krig_result$krige_output$var1.pred, 'krig-result.tif')
writeGDAL(krig_result$krige_output, 'krig-result.tif')
krig_result$krige_output
d=read.csv(file="~/Documents/teaching/adg/data/stats/demo.tsv", sep="\t")
summary(d)
(d$P0004M + d$P0004F + d$P0509M + d$P0509F + d$P1014M + d$P1014F + d$P1519M + d$P1519F) / (d$PTOT)
d$m20 = (d$P0004M + d$P0004F + d$P0509M + d$P0509F + d$P1014M + d$P1014F + d$P1519M + d$P1519F) / (d$PTOT)
d$m20
summary(d$m20)
count(d$m20)
length(d$m20)
de = d[sample(1:nrow(d), 100, replace=FALSE),]
summary(de)
summary(de$m20)
summary(d$m20)
mean(de$m20)
help(sd)
help(glm)
help(relevel)
setwd("~/Documents/teaching/adg/26-glm")
d = read.csv(file="ch-socioeco-typologie.tsv", sep="\t")
levels(d$typologie_ofs_court)
categories = levels(d$typologie_ofs_court)
len(d)
length(d)
length(d$typologie_ofs_court)
trn = sample(d, length(d$typologie_ofs_court)*0.9)
trn = sample(d$typologie_ofs_court, length(d$typologie_ofs_court)*0.9)
trn
sample(50)
sample(50, 10)
help(sample)
idx = sample(length(d$typologie_ofs_idx), size=length(d$typologie_ofs_idx)*0.9)
length(idx)
idx
length(d$typologie_ofs_idx)
length(d$typologie_ofs_court)
idx = sample(length(d$typologie_ofs_court), size=length(d$typologie_ofs_court)*0.9)
length(idx)
help(subset)
ds = subset(d, idx)
ds[idx,]
ds=df[idx,]
ds=d[idx,]
ds
summary(ds)
idx = sample(nrow(d), size=0.9*nrow(d))#
dtrain = d[idx,]#
dtest = d[-idx,]
library('nnet')
regmlogit = multinom(typologie_ofs_court ~ NADHO + NADRET + AD3PRIM + AD3SEC, data=dtrain)
summary(regmlogit)
regmlogit
type(regmlogit)
class(regmlogit)
predict(regmlogit)
predict(regmlogit, newdata=dtest)
table(predict(regmlogit, newdata=dtest)
)
help(table)
table(predict(regmlogit, newdata=dtest), dtest$typologie_ofs_court)
predict(regmlogit, newdata=dtest) == dtest$typologie_ofs_court
nrow(dtest)
where(predict(regmlogit, newdata=dtest) == dtest$typologie_ofs_court)
sum(predict(regmlogit, newdata=dtest) == dtest$typologie_ofs_court)
which(predict(regmlogit, newdata=dtest) == dtest$typologie_ofs_court)
length(which(predict(regmlogit, newdata=dtest) == dtest$typologie_ofs_court))
